// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/

$personal-primary: (
  50: #e2f1f0,
  100: #b7ded8,
  200: #8ac9c0,
  300: #60b3a7,
  400: #47a295,
  500: #3a9283,
  600: #368576,
  700: #307567,
  800: #2c6559,
  900: #24493e,
  contrast: (
    50: rgba(black, 0.87),
    100: rgba(black, 0.87),
    200: rgba(black, 0.87),
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
  ),
);
$personal-warn: (
  50: #f2ebcf,
  100: #d9caab,
  200: #b9a784,
  300: #97865d,
  400: #7e6c3f,
  500: #665421,
  600: #5c4b1b,
  700: #4f3e13,
  800: #44310a,
  900: #372300,
  contrast: (
    50: rgba(black, 0.87),
    100: rgba(black, 0.87),
    200: rgba(black, 0.87),
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
  ),
);
$personal-accent: (
  50: #faf4ff,
  100: #f2ecff,
  200: #e7e2ff,
  300: #d6d1f1,
  400: #b1accc,
  500: #918cab,
  600: #686581,
  700: #55516d,
  800: #36334d,
  900: #15142b,
  contrast: (
    50: rgba(black, 0.87),
    100: rgba(black, 0.87),
    200: rgba(black, 0.87),
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
  ),
);

$my-primary: mat.define-palette($personal-primary, 800, 500, 900);
$my-warn: mat.define-palette($personal-warn, 800, 500, 900);
$my-accent: mat.define-palette($personal-accent, 800, 900, 500);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".

$E-Commerce-Frontend-theme: mat.define-light-theme(
  (
    color: (
      primary: $my-primary,
      accent: $my-accent,
      warn: $my-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($E-Commerce-Frontend-theme);

/* You can add global styles to this file, and also import other style files */
@import "~bootstrap/dist/css/bootstrap.css";

:root {
  --primary-color: #2c6559;
  --secondary-color: #a58e44;
  --ternary-color: #4f3e13;
  --dark-color: #15142b;
}

* {
  font-family: Roboto, Arial, sans-serif;
  box-sizing: border-box;
}

.mdc-tab__text-label {
  font-size: 1.5rem;
  font-weight: 500;
}

body {
  margin: 0;
  padding: 0;
  background-color: var(--primary-color);
}

form {
  display: flex;
  flex-direction: column;
}

.form-group {
  position: relative;

  //sem preenchimento
  label {
    position: absolute;
    top: 12px;
    left: 5px;
    font-size: 15px;
    transition: 0.5s ease-in-out;
    pointer-events: none;
  }

  //com preenchimento
  input:focus + label,
  input:not(:placeholder-shown) + label {
    transform: translate(1px, -13px);
    font-size: 12px;
    font-weight: bold;
  }

  select:focus + label,
  select.ng-valid + label {
    transform: translate(1px, -13px);
    font-size: 12px;
    font-weight: bold;
  }

  input.form-control,
  select.form-control {
    padding-top: 15px;
    padding-left: 5px;
    height: 50px;
    width: 100%;

    border-radius: 10px;
    font-size: 15px;
  }
}

html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

/* Utility classes */

.no-select {
  pointer-events: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.container-columns {
  display: flex;
  flex-direction: column;
}

.animate {
  animation-duration: 1s;
  animation-fill-mode: both;
  &.animate--infinite {
    animation-iteration-count: infinite;
  }

  &.animate--ease-in {
    animation-timing-function: ease-in;
  }

  &.animate--delay-1s {
    animation-delay: 1s;
  }

  &.animate--delay-500ms {
    animation-delay: 0.5s;
  }

  &.animate--fast {
    animation-duration: 0.6s;
  }

  &.animate--faster {
    animation-duration: 0.4s;
  }

  &.animate--slow {
    animation-duration: 3s;
  }
}

/* Animations */

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.fadeIn {
  animation-name: fadeIn;
}

@keyframes shake {
  0% {
    rotate: 0deg;
  }
  25% {
    rotate: -15deg;
    filter: blur(2px);
  }
  50% {
    rotate: 15deg;
  }
  100% {
    rotate: 0deg;
    filter: blur(0px);
  }
}

.shake {
  animation-name: shake;
}

@keyframes upToDown {
  25% {
    transform: translateY(-1rem);
  }
  0%,
  50%,
  100% {
    transform: translateY(0);
  }
}

.upToDown {
  animation-name: upToDown;
}
